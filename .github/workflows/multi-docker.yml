name: multi-docker 

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: Build development image
      run: docker build -t mhj/react-test -f ./client/Dockerfile.dev ./client

    - name: Run tests
      run: docker run mhj/react-test npm test -- --coverag --watchAll=false

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: Build production images
      run: |
        docker build -t mhj-multi-client ./client
        docker build -t mhj-multi-nginx ./nginx
        docker build -t mhj-multi-server ./server
        docker build -t mhj-multi-worker ./worker

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ap-northeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repositories if they don't exist
      run: |
        aws ecr describe-repositories --repository-names multi-docker-client || aws ecr create-repository --repository-name multi-docker-client
        aws ecr describe-repositories --repository-names multi-docker-server || aws ecr create-repository --repository-name multi-docker-server
        aws ecr describe-repositories --repository-names multi-docker-worker || aws ecr create-repository --repository-name multi-docker-worker
        aws ecr describe-repositories --repository-names multi-docker-nginx || aws ecr create-repository --repository-name multi-docker-nginx

    - name: Push images to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker tag mhj-multi-client $ECR_REGISTRY/multi-docker-client:latest
        docker tag mhj-multi-server $ECR_REGISTRY/multi-docker-server:latest
        docker tag mhj-multi-worker $ECR_REGISTRY/multi-docker-worker:latest
        docker tag mhj-multi-nginx $ECR_REGISTRY/multi-docker-nginx:latest
        docker push $ECR_REGISTRY/multi-docker-client:latest
        docker push $ECR_REGISTRY/multi-docker-server:latest
        docker push $ECR_REGISTRY/multi-docker-worker:latest
        docker push $ECR_REGISTRY/multi-docker-nginx:latest

    - name: Generate docker-compose.yml for deployment
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        cat > docker-compose.yml << EOF
        services:
          client:
            image: $ECR_REGISTRY/multi-docker-client:latest
            
          server:
            image: $ECR_REGISTRY/multi-docker-server:latest
            
          worker:
            image: $ECR_REGISTRY/multi-docker-worker:latest
            
          nginx:
            image: $ECR_REGISTRY/multi-docker-nginx:latest
            ports:
              - "80:80"
            depends_on:
              - client
              - server
        EOF

    - name: Generate deployment package
      run: |
        zip -r deploy.zip docker-compose.yml
        ls -la deploy.zip
        
    - name: Debug AWS credentials
      run: |
        echo "AWS Access Key length: ${#AWS_ACCESS_KEY}"
        echo "AWS Secret Key length: ${#AWS_SECRET_KEY}"
      env:
        AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}

    - name: Deploy to AWS Elastic Beanstalk
      id: deploy
      uses: einaregilsson/beanstalk-deploy@v22
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
        aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
        application_name: multi-docker
        environment_name: Multi-docker-env
        version_label: ${{ github.sha }}
        region: ap-northeast-1
        deployment_package: deploy.zip
        wait_for_deployment: true
        wait_for_environment_recovery: 300

    - name: Get deployment logs on failure
      if: failure()
      run: |
        pip install awsebcli
        eb init multi-docker --region ap-northeast-1 --platform docker
        eb logs Multi-docker-env --all
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
